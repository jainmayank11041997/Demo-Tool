<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>sn_best_practices.BestPracticesUtil</api_name>
        <caller_access>1</caller_access>
        <client_callable>false</client_callable>
        <description/>
        <name>BestPracticesUtil</name>
        <script><![CDATA[var BestPracticesUtil = Class.create();
BestPracticesUtil.prototype = {
    initialize: function() {},

    createViolation: function(app, category, action, violation, level) {
        var gr = new GlideRecord("sn_best_practices_violation");
        gr.setValue("spoke", app);
        gr.setValue("category", category);
        gr.setValue("action", action);
        gr.setValue("violation", violation);
        gr.setValue("fix_level", level);
        gr.insert();
    },
    createFlowViolation: function(app, category, flow, violation, level) {
        var gr = new GlideRecord("sn_best_practices_violation");
        gr.setValue("spoke", app);
        gr.setValue("category", category);
        gr.setValue("flow", flow);
        gr.setValue("violation", violation);
        gr.setValue("fix_level", level);
        gr.insert();
    },
	createVariableViolation: function(app, category, action, violation, level,input){
		var gr = new GlideRecord("sn_best_practices_violation");
        gr.setValue("spoke", app);
        gr.setValue("category", category);
        gr.setValue("action", action);
        gr.setValue("violation", violation);
        gr.setValue("fix_level", level);
		gr.setValue("violated_item",input);
        gr.insert();
	},

    verifyLabel: function(label) {
        var res = label.split(" ");
        var arr = "";

        for (var i = 0; i < res.length; i++) {
            if (res[i] != "" && this.isLowerCase(res[i][0])) {
                arr = arr.concat(res[i] + ",");
            }
        }
        if (arr.endsWith(","))
            arr = arr.substr(0, arr.length - 1);
        return arr;
    },

    isLowerCase: function(str) {
        return str == str.toLowerCase() && str != str.toUpperCase();
    },

    isUpperCase: function(str) {
        return str != str.toLowerCase() && str == str.toUpperCase();
    },

    verifySpecialWords: function(word) {
        var listWords = ["ID", "GUID", "URL", "SKU", "SQL", "OU", "BCC", "CC", "KB", "VPC", "SHA", "OS", "DNS", "KMS", "VM", "MIME", "SSO", "UI", "ARN", "MFA", "SCCM", "DB", "VPN", "SLA", "CIDR", "NAT", "SNS", "AWS", "IOPS", "IP", "API"];
      
		if(word.toLowerCase() == "ids" && word != "IDs")
			return "failed_exists";
        if(listWords.indexOf(word.toUpperCase()) != -1 && !this.isUpperCase(word))
			return "failed_exists";
		else if(listWords.indexOf(word.toUpperCase()) != -1 && this.isUpperCase(word))
			return "success";
		else
			return "failed";
		
    },
	
    type: 'BestPracticesUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>chakradhar.jn@snc</sys_created_by>
        <sys_created_on>2020-02-25 15:50:23</sys_created_on>
        <sys_id>77aa4af3db4744108d27a35305961979</sys_id>
        <sys_mod_count>52</sys_mod_count>
        <sys_name>BestPracticesUtil</sys_name>
        <sys_package display_value="Best Practices Spoke" source="sn_best_practices">5c37197fdb4344108d27a3530596198f</sys_package>
        <sys_policy/>
        <sys_scope display_value="Best Practices Spoke">5c37197fdb4344108d27a3530596198f</sys_scope>
        <sys_update_name>sys_script_include_77aa4af3db4744108d27a35305961979</sys_update_name>
        <sys_updated_by>chakradhar.jn@snc</sys_updated_by>
        <sys_updated_on>2020-02-27 09:20:14</sys_updated_on>
    </sys_script_include>
</record_update>
